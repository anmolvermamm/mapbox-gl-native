#include "rectf.h"
#include "pointf.h"
#include <iostream>
#include "string_helper.h"
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
RectF::RectF()
{
 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
RectF::RectF(float l , float r , float b , float t )
   : m_l( l ) , m_r( r ) , m_b( b ) , m_t( t )
{
   CalcSize(); 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
//RectF::RectF(const PointF& top_left , const PointF& bottom_right )
////   : m_l( top_left.x() ) , m_r( bottom_right.x() ) , m_b( top_left.y() ) , m_t( bottom_right.y() )
//{
// 
//}
///*--------------------------------------------------------------------------*/
//
///*--------------------------------------------------------------------------*/
//RectF::RectF(const PointF& top_left )
//   : m_l( top_left.x() ) ,   m_b( top_left.y() ) 
//{
// 
//}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
RectF::~RectF()
{
 
}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void RectF::SetSize( const PointF& size )
{
   m_w = size.x(); 
   m_w = size.y(); 

   m_r = m_l + m_w;
   m_t = m_b + m_h;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void RectF::CalcSize()
{
   m_w = m_r - m_l; 
   m_h = m_t - m_b; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
std::ostream& operator<<(std::ostream& os, const RectF& rectf )
{
   os << "{{" << rectf.m_l << "," << rectf.m_b << "},"
      <<  "{" << rectf.m_r << "," << rectf.m_t << "}}"; 
   return os;
}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::left()const
{
   return m_l; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::right()const
{
   return m_r; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::bottom()const
{
   return m_b; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::top()const
{
   return m_t; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::width()const
{
   return m_w;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float RectF::height()const
{
   return m_h;
}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void RectF::GetCenter( PointF& center )const
{
   center.setX( 
      (m_l + m_r) / (2.0 )
         );
   center.setY( 
      (m_b + m_t) / (2.0 )
         );
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
RectF RectF::FromString( const std::string& str )
{
   auto list = split( str , "," );
   if( list.size() != 4 )
      return RectF();

   RectF rect;
   rect.m_l = std::stof( list[0] );
   rect.m_b = std::stof( list[1] );
   rect.m_r = std::stof( list[2] );
   rect.m_t = std::stof( list[3] );
   rect.CalcSize();

   return rect;

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
bool RectF::isNull() const
{
   return m_w == 0 && m_h == 0;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
RectF& RectF::operator+=(const RectF& other )
{
   if( isNull() )
   {
      *this = other;
      return *this;
   }

   m_l = std::min( m_l , other.m_l );
   m_r = std::min( m_r , other.m_r );
   m_t = std::min( m_t , other.m_t );
   m_b = std::min( m_b , other.m_b );
   CalcSize();
   return *this;

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
bool RectF::ContainsPoint( const PointF& pos )
{
   return pos.x() >= m_l && pos.x() <= m_r &&
       pos.y() >= m_b && pos.y() <= m_t;

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void RectF::ExpandSides( float size )
{
   m_l -= size;
   m_b -= size;
   m_r += size;
   m_t += size;
   CalcSize();
}

