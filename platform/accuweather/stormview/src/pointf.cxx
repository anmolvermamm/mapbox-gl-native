#include "pointf.h"
#include <iostream>
#include <cmath>
#include <limits>

template <typename T>
bool AlmostEqual(T v1, T v2)
{
  return (std::fabs(v1 - v2) < std::fabs(std::min(v1, v2)) * std::numeric_limits<double>::epsilon());
}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
PointF::PointF()
{
 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
PointF::PointF(float x , float y)
   : m_x( x ) , m_y( y )
{
 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
//PointF::~PointF()
//{
// 
//}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float PointF::x()const
{
   return m_x; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float PointF::y()const
{
   return m_y; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float& PointF::x()
{
   return m_x;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float& PointF::y()
{
   return m_y;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
PointF& PointF::setX(float x)
{
   m_x = x; 
   return *this;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
PointF& PointF::setY(float y)
{
   m_y = y; 
   return *this;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
std::ostream& operator<<(std::ostream& os, const PointF& pointf )
{
   os << "{" << pointf.m_x << "," << pointf.m_y << "}"; 
   return os;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
float PointF::distanceSquared( const PointF& other )const
{
   return std::sqrt((other.x() - m_x )*(other.x() - m_x) + (other.y() - m_y)*(other.y() - m_y));
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
bool PointF::operator==( const PointF& pointf ) const
{
   return AlmostEqual( this->m_x  ,pointf.m_x ) && AlmostEqual( this->m_y  , pointf.m_y );
}

