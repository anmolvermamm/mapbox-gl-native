#include "timer.h"
#include "config.h"
#include <iostream>
#include "date_time.h"


std::unordered_set<Timer*> Timer::timers;
bool Timer::print = false;

bool TIMER_LOG = false;

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void CountDownTimer::Update()
{
   auto frame_time = Config::GetFrameTime();
   elapsed_time += frame_time;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
bool CountDownTimer::TimerFinished()
{
   return elapsed_time > target_time;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void CountDownTimer::SetCountDownTimeMs( float time_ms , bool repeat )
{
   target_time = time_ms;
   m_repeat = repeat;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void CountDownTimer::Reset()
{
   elapsed_time = elapsed_time - target_time;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void TargetTimer::Update()
{

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void TargetTimer::SetTargetTime( const DateTime& time  )
{
   target_time = time.GetTimeT();
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
bool TargetTimer::TimerFinished()
{
   auto now = Config::GetTimeT();
   return now > target_time;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
Timer::Timer()
{
   AddTimerToList( this );
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
Timer::~Timer()
{
   RemoveTimerFromList( this );
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::setCallback( const std::function<void(void)>& callback )
{
   m_callback = callback;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::Emit()
{
   m_callback();
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::UpdateAllTimers( )
{

   //If timer reached end
   //Emit
   //if not repeating
   //remove from list
   //else reset
   //Do not delete until all 
   // functions have been called

   auto i = timers.begin();
   while( i != timers.end() )
   {
      (*i)->Update();
      if( (*i)->TimerFinished() )
      {

         if( (*i)->Repeatable() )
         {
            (*i)->Emit();
            (*i)->Reset();
         } else
         {
            auto timer = (*i);
            i = timers.erase( i );
            timer->Emit();
         }
      }
      else
      {
         ++i;
      }

   }
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::UpdateTwo( )
{

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::AddTimerToList( Timer* timer )
{
   timers.insert( timer );
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Timer::RemoveTimerFromList( Timer* timer )
{
   auto i = timers.find( timer ); 
   if( i != timers.end() )
   {
      timers.erase( timer );
   }
}
