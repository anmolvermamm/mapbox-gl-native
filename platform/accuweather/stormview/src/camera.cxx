#include "camera.h"
#include "glm/mat4x4.hpp"
#include "glm/gtc/matrix_transform.hpp"

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
Camera::Camera()
{
 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
Camera::~Camera()
{
 
}

/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Camera::SetViewPort( const PointF& size )
{
   m_viewport = size; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
glm::mat4x4 Camera::GetWorldMatrix()const
{
   static float near = -1.0;
   static float far = 4.0;
   glm::mat4x4 ortho = glm::ortho( 
         m_extents.left() , m_extents.right() , 
         m_extents.bottom() , m_extents.top() , 
         near , far );
   return ortho;
    
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Camera::SetExtents( const RectF& rect )
{
   m_extents = rect; 
   CalculateWorldToViewport();
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
const RectF& Camera::GetExtents()const
{
   return m_extents; 
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
PointF Camera::GetCenter()const
{
   PointF center;
   m_extents.GetCenter( center );
   return center;
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
void Camera::CalculateWorldToViewport()
{
   m_world_to_viewport.setX(
      m_extents.width() / m_viewport.x()
   );

   m_world_to_viewport.setY(
      m_extents.height() / m_viewport.y()
   );

}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
const PointF& Camera::GetWorldToViewport()const
{
   return m_world_to_viewport;
}















